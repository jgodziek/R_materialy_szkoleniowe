library(sf)
library(dplyr)

#ustawienie bieżącej ścieżki dostępu (working directory)
setwd('ścieżka/dostępu/do/twojego/folderu')
setwd('D:/JG/IEDS/_Dydaktyka/2023_24_sem_zimowy/programowanie_w_GIS/dane')


getwd() #wyświetlenie bieżącej ścieżki dostępu


#wczytanie pliku z gminami GZM
gzm_gminy <- st_read('gzm_gminy.shp')



#FILTROWANIE DANYCH - zapytania
library(dplyr) #biblioteka do różnych operacji na danych tabelarycznych

#obliczenie powierzchni
gzm_gminy$pow_m2 <- as.numeric(st_area(gzm_gminy)) #m2
gzm_gminy$pow_km2 <- gzm_gminy$pow_m2/1000000 #km2


#obliczenie obwodu każdej gminy
gzm_gminy$obwod_m <- as.numeric(lwgeom::st_perimeter(gzm_gminy)) #m
gzm_gminy$obwod_km <- gzm_gminy$obwod_m/1000 #km

#usunięcie kolumny z tabeli atrybutóW
gzm_gminy <- select(gzm_gminy, -c(pow_m2))
gzm_gminy <- select(gzm_gminy, -c(obwod_m))

#usuwanie dwóch kolumn w jednej linii kodu (to samo co linie 30 i 31)
gzm_gminy <- select(gzm_gminy, -c(pow_m2, obwod_m))


#utworzenie nowej kolumny, w której będą nazwy gmin bez polskich znaków
gzm_gminy$nazwa_bpz <- gzm_gminy$jpt_nazwa_ #podstawienie nazw z polskimi znakami z kolumny 

library(stringr) #biblioteka do operacji na ciągach znakowych
#usuniecie polskich znaków
gzm_gminy$nazwa_bpz <- gzm_gminy$nazwa_bpz %>% str_replace_all(
  c('ą' = 'a', 'ę' = 'e', 'ó' = 'o',
    'Ś' = 'S', 'ś' = 's', ' ' = '_',
    'ń'= 'n', 'ł' = 'l', 'Ł' = 'L',
    'ż' = 'z', 'ź' = 'z'))


#zapisanie warstwy gmin z obliczoną powierzchnią i obwodem
getwd()
st_write(gzm_gminy, 'gzm_gminy_pow_obw.shp')


#proste zapytanie z operatorem porównania
#biblioteka 'base'
gzm_gminy_sel <- gzm_gminy[gzm_gminy$pow_km2 > 100, ]
plot(gzm_gminy_sel)
plot(gzm_gminy_sel$geometry) #wyświetlenie tylko geometrii objektów

#biblioteka 'dplyr' (install.packages('dplyr'); library(dplyr))
gzm_gminy_sel <- gzm_gminy %>% filter(pow_km2 < 50)
plot(gzm_gminy_sel$geometry)


#zapytania złożone - warunki logiczne AND i OR
# |  - OR (lub)
# &  - AND (i)


#FILTROWANIE DANYCH cd.

#proste zapytanie z operatorem porównania
#biblioteka 'base'
gzm_gminy_sel <- gzm_gminy[gzm_gminy$pow_km2 > 100, ]
plot(gzm_gminy_sel)
plot(gzm_gminy_sel$geometry) #wyświetlenie tylko geometrii objektów

#biblioteka 'dplyr' (install.packages('dplyr'); library(dplyr))
gzm_gminy_sel <- gzm_gminy %>% filter(pow_km2 < 50)
plot(gzm_gminy_sel$geometry)


#zapytania złożone - warunki logiczne AND i OR
# |  - OR (lub)
# &  - AND (i)


#sprawdzenie podstawowych statystyk dla kolumn: 'pow_km2' i 'obwod_km'
summary(gzm_gminy$pow_km2)
summary(gzm_gminy$obwod_km)


#operator | (lub)
#biblioteka 'base'
gzm_gminy_sel <- gzm_gminy[(gzm_gminy$pow_km2 > 100)|(gzm_gminy$pow_km2 < 50), ]
#biblioteka 'sf', wyświetlanie kartogramu dla wartości jednego wybranego atrybutu
plot(gzm_gminy_sel['pow_km2'])

#biblioteka 'dplyr'
gzm_gminy_sel <- gzm_gminy %>% filter(pow_km2 < 40 | pow_km2 < 120)
#biblioteka 'sf', wyświetlanie kartogramu dla wartości jednego wybranego atrybutu
plot(gzm_gminy_sel['pow_km2'])


#operator & (i)
#biblioteka 'base'
gzm_gminy_sel <- gzm_gminy[(gzm_gminy$pow_km2 > 100) & (gzm_gminy$obwod_km > 80), ]
#biblioteka 'sf', wyświetlanie kartogramu dla wartości jednego wybranego atrybutu
plot(gzm_gminy_sel['pow_km2'])

#biblioteka 'dplyr'
gzm_gminy_sel <- gzm_gminy %>% filter(pow_km2 < 30 & obwod_km < 25)
#biblioteka 'sf', wyświetlanie kartogramu dla wartości jednego wybranego atrybutu
plot(gzm_gminy_sel['pow_km2'])





#pętla programistyczna FOR

nazwy_gmin <- gzm_gminy$jpt_nazwa_ #utworzenie wektora z nazwami gmin

for (nazwa in nazwy_gmin){ #dla każdej nazwy zawartej w wektorze 'nazwy gmin'
  print(nazwa) #drukuj nazwę
}

#Przykład 1
#Cel: Zapisanie każdej gminy jako osobny shapefile.

#Etapy realizacji
#Dla każdej gminy:
#1) wybierz gminę i utwórz z niej nową warstwę
#2) Zapisz utworzoną nową warstwę do wybranego folderu.
#   -> Ustaw nazwę pliku shp jako nazwę gminy (z polskimi znakami)


#wczytanie ścieżki do zapisu plików do zmiennej 'sciezka'
sciezka <- 'D:/JG/IEDS/_Dydaktyka/2023_24_sem_zimowy/programowanie_w_GIS/dane/gzm_gminy_shp_osobno'

#powtarzanie operacji (iteracja) dla każdej gminy
1:nrow(gzm_gminy)

#dostęp do całego wiersza oznaczającego pojedynczą gminę
gzm_gminy[1, ]
plot(gzm_gminy[1, ]) #wyświetlenie geometrii

#dostęp do nazwy pojedynczej gminy
gzm_gminy$jpt_nazwa_[1]

#test ścieżki zapisu plików shp z granicami pojedynczych gmin
paste0(sciezka, '/', gzm_gminy$jpt_nazwa_[1], '.shp')

#pętla FOR
for (i in 1:nrow(gzm_gminy)){
  gmina <- gzm_gminy[i, ] #wybranie i-tej gminy do osobnego obiektu pakietu sf
  st_write(gmina, paste0(sciezka, '/', gzm_gminy$jpt_nazwa_[i], '.shp')) #zapisanie i-tej gminy
}



#Przykład 2
#Cel:  Zapisanie każdej gminy jako osobny shapefile.
#      Nazwa shapefile musi być bez polskich znaków, a spacje muszą zostać zamienione na '_'.

sciezka <- 'D:/JG/IEDS/_Dydaktyka/2023_24_sem_zimowy/programowanie_w_GIS/dane/gzm_gm_shp_bpz'

#utworzenie nowej kolumny, w której będą nazwy gmin bez polskich znaków
gzm_gminy$nazwa_bpz <- gzm_gminy$jpt_nazwa_ #podstawienie wartości z kolumny 

library(stringr) #biblioteka do operacji na ciągach znakowych
#usuniecie polskich znaków
gzm_gminy$nazwa_bpz <- gzm_gminy$nazwa_bpz %>% str_replace_all(
  c('ą' = 'a', 'ę' = 'e', 'ó' = 'o',
    'Ś' = 'S', 'ś' = 's', ' ' = '_',
    'ń'= 'n', 'ł' = 'l', 'Ł' = 'L',
    'ż' = 'z', 'ź' = 'z'))

#pętla FOR
for (i in 1:nrow(gzm_gminy)){
  gmina <- gzm_gminy[i, ] #wybranie i-tej gminy do osobnego obiektu pakietu sf
  st_write(gmina, paste0(sciezka, '/', gzm_gminy$nazwa_bpz[i], '.shp')) #zapisanie i-tej gminy
}



#######
# pętla FOR oraz wyrażenie warunkowe IF

for (i in 1:nrow(gzm_gminy)){ #dla każdego i w przedziale od 1 do liczba wierszy (gzm_gminy) [dla każdej gminy]
  if (gzm_gminy[i, ]$pow_km2 < 30){  #jeśli powierzchnia gminy jest mniejsza niż 30 km2
    gmina <- gzm_gminy[i, ] #wybranie i-tej gminy do osobnego obiektu pakietu sf
    st_write(gmina, paste0(getwd(), '/gzm_gm_if/', gzm_gminy$nazwa_bpz[i], '.shp')) #zapisanie i-tej gminy
  }
}

#Sprawdzenie - zapytanie: wybierz gminy o powierzchni poniżej 30 km2
gzm_gminy_sel <- gzm_gminy %>% filter (pow_km2 < 30)
print(gzm_gminy_sel$jpt_nazwa_)










